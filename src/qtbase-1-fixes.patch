This file is part of MXE. See LICENSE.md for licensing information.

From c0c8cf4d8e554ac6f1a17dc8d2dce16897ae5cf3 Mon Sep 17 00:00:00 2001
From: Ray Donnelly <mingw.android@gmail.com>
Date: Wed, 26 Aug 2015 12:45:43 +0100
Subject: [PATCH 1/8] cmake: Rearrange STATIC vs INTERFACE targets

Otherwise we attempt to add_library(Qt5::UiPlugin STATIC IMPORTED)
for header-only modules when building Qt5 statically.

Source: https://git.io/vzWJz
See also: https://github.com/mxe/mxe/issues/1185

diff --git a/mkspecs/features/data/cmake/Qt5BasicConfig.cmake.in b/mkspecs/features/data/cmake/Qt5BasicConfig.cmake.in
index 3ed6dd5889..cc5bc9dc16 100644
--- a/mkspecs/features/data/cmake/Qt5BasicConfig.cmake.in
+++ b/mkspecs/features/data/cmake/Qt5BasicConfig.cmake.in
@@ -214,12 +214,12 @@ if (NOT TARGET Qt5::$${CMAKE_MODULE_NAME})
     list(APPEND _Qt5$${CMAKE_MODULE_NAME}_LIB_DEPENDENCIES \"$${CMAKE_INTERFACE_QT5_MODULE_DEPS}\")
 !!ENDIF
 
+!!IF equals(TEMPLATE, aux)
+    add_library(Qt5::$${CMAKE_MODULE_NAME} INTERFACE IMPORTED)
+!!ELSE
 !!IF !isEmpty(CMAKE_STATIC_TYPE)
     add_library(Qt5::$${CMAKE_MODULE_NAME} STATIC IMPORTED)
     set_property(TARGET Qt5::$${CMAKE_MODULE_NAME} PROPERTY IMPORTED_LINK_INTERFACE_LANGUAGES "CXX")
-!!ELSE
-!!IF equals(TEMPLATE, aux)
-    add_library(Qt5::$${CMAKE_MODULE_NAME} INTERFACE IMPORTED)
 !!ELSE
     add_library(Qt5::$${CMAKE_MODULE_NAME} SHARED IMPORTED)
 !!ENDIF
-- 
2.20.1


From b57baee4eee0a33338776498da7f216fb2a7fdc0 Mon Sep 17 00:00:00 2001
From: Tony Theodore <tonyt@logyst.com>
Date: Sat, 16 Jul 2016 20:31:07 +1000
Subject: [PATCH 2/8] Fix pkgconfig file and library naming

See: https://codereview.qt-project.org/#/c/165394/
     https://bugreports.qt.io/browse/QTBUG-30898

Currently, *.pc files are generated with debug suffix `d` in `-release`
mode and without the suffix in `-debug` or `-debug-and-release`. This
can be worked around by `CONIFG-=debug_and_release`, however, a more
predictable and consistent naming approach would be preferable.

This change mimics the *.prl file and lib conventions:

  -release: creates normal *.pc files and lib names
  -release -force-debug-info: normal as above
  -debug: creates *d.pc and *d lib names
  -debug-and-release: creates both
  -default: creates both (default link: debug)

and should be unsurprising to users of `pkg-config`. At very least,
it's deterministic and easily incorporated into build systems.

Task-number: 30898
Change-Id: If75336ec7d21a7ec0cb6d245fe87c64afcb5a644

diff --git a/mkspecs/features/qt_module.prf b/mkspecs/features/qt_module.prf
index 51b5bde67a..faba17aedd 100644
--- a/mkspecs/features/qt_module.prf
+++ b/mkspecs/features/qt_module.prf
@@ -263,6 +263,10 @@ load(qt_installs)
 
 load(qt_targets)
 
+# Set TARGET towards the end but before pkgconfig setup to keep naming
+# conventions consistent with *prl files
+TARGET = $$qt5LibraryTarget($$TARGET$$QT_LIBINFIX)
+
 # this builds on top of qt_common
 !internal_module:if(unix|mingw) {
     CONFIG += create_pc
@@ -278,12 +282,12 @@ load(qt_targets)
         QMAKE_PKGCONFIG_INCDIR = $$[QT_INSTALL_HEADERS/raw]
         QMAKE_PKGCONFIG_CFLAGS = -D$$MODULE_DEFINE -I${includedir}/$$MODULE_INCNAME
     }
-    QMAKE_PKGCONFIG_NAME = $$replace(TARGET, ^Qt, "Qt$$QT_MAJOR_VERSION ")
-    QMAKE_PKGCONFIG_FILE = $$replace(TARGET, ^Qt, Qt$$QT_MAJOR_VERSION)
+    QMAKE_PKGCONFIG_NAME = $$replace(TARGET, ^Qt$$QT_MAJOR_VERSION, "Qt$$QT_MAJOR_VERSION ")
+    QMAKE_PKGCONFIG_FILE = $$TARGET
     for(i, MODULE_DEPENDS): \
-        QMAKE_PKGCONFIG_REQUIRES += $$replace(QT.$${i}.name, ^Qt, Qt$$section(QT.$${i}.VERSION, ., 0, 0))
+        QMAKE_PKGCONFIG_REQUIRES += $$replace(QT.$${i}.name, ^Qt, Qt$$section(QT.$${i}.VERSION, ., 0, 0))$$qtPlatformTargetSuffix()
     isEmpty(QMAKE_PKGCONFIG_DESCRIPTION): \
-        QMAKE_PKGCONFIG_DESCRIPTION = $$replace(TARGET, ^Qt, "Qt ") module
+        QMAKE_PKGCONFIG_DESCRIPTION = $$replace(TARGET, ^Qt$$QT_MAJOR_VERSION, "Qt ") module
     pclib_replace.match = $$lib_replace.match
     !isEmpty(lib_replace.replace): \
         pclib_replace.replace = $$QMAKE_PKGCONFIG_LIBDIR
@@ -317,5 +321,3 @@ win32 {
     # On other platforms, Qt's own compilation goes needs to compile the Qt 5.0 API
     DEFINES *= QT_DISABLE_DEPRECATED_BEFORE=0x050000
 }
-
-TARGET = $$qt5LibraryTarget($$TARGET$$QT_LIBINFIX)  # Do this towards the end
-- 
2.20.1


From 691b8c15f19116a881a6830cfbb344bf49c385e7 Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Sun, 29 Jan 2017 13:02:16 +0100
Subject: [PATCH 3/8] reenable fontconfig for win32 (MXE-specific)

Change-Id: I05b036366bd402e43309742412bcf8ca91fe125f

diff --git a/src/gui/configure.json b/src/gui/configure.json
index 6fdcd562a7..69f00bc71d 100644
--- a/src/gui/configure.json
+++ b/src/gui/configure.json
@@ -1213,7 +1213,7 @@
         "fontconfig": {
             "label": "Fontconfig",
             "autoDetect": "!config.darwin",
-            "condition": "!config.win32 && features.system-freetype && libs.fontconfig",
+            "condition": "features.system-freetype && libs.fontconfig",
             "output": [ "privateFeature", "feature" ]
         },
         "gbm": {
diff --git a/src/plugins/platforms/minimal/qminimalintegration.cpp b/src/plugins/platforms/minimal/qminimalintegration.cpp
index f457f69f11..2b2aec0868 100644
--- a/src/plugins/platforms/minimal/qminimalintegration.cpp
+++ b/src/plugins/platforms/minimal/qminimalintegration.cpp
@@ -162,7 +162,11 @@ QPlatformFontDatabase *QMinimalIntegration::fontDatabase() const
 
         if (!m_fontDatabase) {
 #if QT_CONFIG(fontconfig)
-            m_fontDatabase = new QGenericUnixFontDatabase;
+#ifdef Q_OS_WIN
+        m_fontDatabase = new QFreeTypeFontDatabase;
+#else
+        m_fontDatabase = new QGenericUnixFontDatabase;
+#endif
 #else
             m_fontDatabase = QPlatformIntegration::fontDatabase();
 #endif
-- 
2.20.1

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Sun, 29 Jan 2017 16:22:03 +0100
Subject: [PATCH 4/8] fix treatment of SYBASE_LIBS

Change-Id: I4c9914cf7ef9d91feb0718a57f2551c1eeed47e0

diff --git a/src/plugins/sqldrivers/configure.pri b/src/plugins/sqldrivers/configure.pri
index b69b51b6..d37423ad 100644
--- a/src/plugins/sqldrivers/configure.pri
+++ b/src/plugins/sqldrivers/configure.pri
@@ -92,7 +92,7 @@ defineTest(qtConfLibrary_sybaseEnv) {
         libs += "-L$${sybase}/lib"
     libs += $$getenv(SYBASE_LIBS)
     !isEmpty(libs) {
-        $${1}.libs = "$$val_escape(libs)"
+        $${1}.libs = $$libs
         export($${1}.libs)
     }
     return(true)

From a2eab53930f2891a15cd1aa1721a5e247851035c Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Sun, 11 Jun 2017 00:27:41 +0200
Subject: [PATCH 5/8] use pkg-config for harfbuzz

Change-Id: Ia65cbb90fd180f1bc10ce077a9a8323a48e51421

diff --git a/src/gui/configure.json b/src/gui/configure.json
index 69f00bc71d..7d15695499 100644
--- a/src/gui/configure.json
+++ b/src/gui/configure.json
@@ -303,7 +303,8 @@
             },
             "headers": "harfbuzz/hb.h",
             "sources": [
-                "-lharfbuzz"
+               { "type": "pkgConfig", "args": "harfbuzz" },
+               "-lharfbuzz"
             ]
         },
         "imf": {
-- 
2.20.1


From 25e2683c3f2ecc5143211a9c80a0f0f8b72b6bd5 Mon Sep 17 00:00:00 2001
From: Mark Brand <mabrand@mabrand.nl>
Date: Sat, 7 Oct 2017 11:39:29 +0200
Subject: [PATCH 6/8] Revert "qmake: don't limit command line length when not
 actually on windows"

This breaks cross compiling for mingw.

This reverts commit 8bebded9ab02b8eec67c44bfddf802d6bf9cda3c.

diff --git a/mkspecs/win32-g++/qmake.conf b/mkspecs/win32-g++/qmake.conf
index 884286ea..780e5512 100644
--- a/mkspecs/win32-g++/qmake.conf
+++ b/mkspecs/win32-g++/qmake.conf
@@ -52,10 +52,8 @@ QMAKE_LFLAGS_CONSOLE    = -Wl,-subsystem,console
 QMAKE_LFLAGS_WINDOWS    = -Wl,-subsystem,windows
 QMAKE_LFLAGS_DLL        = -shared
 QMAKE_LFLAGS_GCSECTIONS = -Wl,--gc-sections
-equals(QMAKE_HOST.os, Windows) {
-    QMAKE_LINK_OBJECT_MAX = 10
-    QMAKE_LINK_OBJECT_SCRIPT = object_script
-}
+QMAKE_LINK_OBJECT_MAX   = 10
+QMAKE_LINK_OBJECT_SCRIPT = object_script
 QMAKE_PREFIX_SHLIB      =
 QMAKE_EXTENSION_SHLIB   = dll
 QMAKE_PREFIX_STATICLIB  = lib
diff --git a/qmake/generators/win32/mingw_make.cpp b/qmake/generators/win32/mingw_make.cpp
index 792ffb19..33002326 100644
--- a/qmake/generators/win32/mingw_make.cpp
+++ b/qmake/generators/win32/mingw_make.cpp
@@ -279,8 +279,7 @@ void MingwMakefileGenerator::writeLibsPart(QTextStream &t)
 
 void MingwMakefileGenerator::writeObjectsPart(QTextStream &t)
 {
-    const ProString &objmax = project->first("QMAKE_LINK_OBJECT_MAX");
-    if (objmax.isEmpty() || project->values("OBJECTS").count() < objmax.toInt()) {
+    if (project->values("OBJECTS").count() < var("QMAKE_LINK_OBJECT_MAX").toInt()) {
         objectsLinkLine = "$(OBJECTS)";
     } else if (project->isActiveConfig("staticlib") && project->first("TEMPLATE") == "lib") {
         QString ar_script_file = var("QMAKE_LINK_OBJECT_SCRIPT") + "." + var("TARGET");

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tony Theodore <tonyt@logyst.com>
Date: Wed, 20 Dec 2017 12:08:48 +1100
Subject: [PATCH 7/8] qtbase: add workaround for internal compiler error

Based on https://codereview.qt-project.org/#/c/212360/

Change-Id: Ia1c902e7b147bdda2b8d7904b40a3b968b8d0369

diff --git a/src/corelib/global/qrandom.cpp b/src/corelib/global/qrandom.cpp
index 90df8653a7..0d7002f2e8 100644
--- a/src/corelib/global/qrandom.cpp
+++ b/src/corelib/global/qrandom.cpp
@@ -90,7 +90,7 @@ DECLSPEC_IMPORT BOOLEAN WINAPI SystemFunction036(PVOID RandomBuffer, ULONG Rando
 
 QT_BEGIN_NAMESPACE
 
-#if defined(Q_PROCESSOR_X86) && QT_COMPILER_SUPPORTS_HERE(RDRND)
+#if defined(Q_PROCESSOR_X86) && !defined(Q_PROCESSOR_X86_32) && QT_COMPILER_SUPPORTS_HERE(RDRND)
 static qsizetype qt_random_cpu(void *buffer, qsizetype count) Q_DECL_NOTHROW;
 
 #  ifdef Q_PROCESSOR_X86_64

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Robert Manner <robert.manner@balabit.com>
Date: Tue, 12 Dec 2017 15:57:37 +0100
Subject: [PATCH 8/8] angle: added crosscompile support


diff --git a/config.tests/win/angle_d3d11_qdtd/angle_d3d11_qdtd.cpp b/config.tests/win/angle_d3d11_qdtd/angle_d3d11_qdtd.cpp
index 2dde2914..da41a9b6 100644
--- a/config.tests/win/angle_d3d11_qdtd/angle_d3d11_qdtd.cpp
+++ b/config.tests/win/angle_d3d11_qdtd/angle_d3d11_qdtd.cpp
@@ -37,7 +37,7 @@
 **
 ****************************************************************************/
 
-#include <D3D11.h>
+#include <d3d11.h>
 
 int main(int, char**)
 {
diff --git a/mkspecs/features/qt_module.prf b/mkspecs/features/qt_module.prf
index d5e24ac1..99f6ec2b 100644
--- a/mkspecs/features/qt_module.prf
+++ b/mkspecs/features/qt_module.prf
@@ -278,7 +278,7 @@ TARGET = $$qt5LibraryTarget($$TARGET$$QT_LIBINFIX)
     else: \
         QMAKE_PKGCONFIG_LIBDIR = $$[QT_INSTALL_LIBS/raw]
     QMAKE_PKGCONFIG_INCDIR = $$[QT_INSTALL_HEADERS/raw]
-    QMAKE_PKGCONFIG_CFLAGS = -I${includedir}/$$MODULE_INCNAME
+    QMAKE_PKGCONFIG_CFLAGS = -I${includedir}/$$MODULE_INCNAME -I${includedir}/QtANGLE
     QMAKE_PKGCONFIG_NAME = $$replace(TARGET, ^Qt$$QT_MAJOR_VERSION, "Qt$$QT_MAJOR_VERSION ")
     QMAKE_PKGCONFIG_FILE = $$TARGET
     for(i, MODULE_DEPENDS): \
diff --git a/src/3rdparty/angle/src/compiler/translator/glslang.l b/src/3rdparty/angle/src/compiler/translator/glslang.l
index d09358dd..258d5403 100644
--- a/src/3rdparty/angle/src/compiler/translator/glslang.l
+++ b/src/3rdparty/angle/src/compiler/translator/glslang.l
@@ -516,6 +516,10 @@ void yyerror(YYLTYPE* lloc, TParseContext* context, void *scanner, const char* r
     context->recover();
 }
 
+void glslangerror(YYLTYPE* lloc, TParseContext* context, void *scanner, const char* reason) {
+    yyerror(lloc, context, scanner, reason);
+}
+
 int int_constant(TParseContext *context) {
     struct yyguts_t* yyg = (struct yyguts_t*) context->getScanner();
 
diff --git a/src/3rdparty/angle/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp b/src/3rdparty/angle/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
index 0173311b..a0274219 100644
--- a/src/3rdparty/angle/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
+++ b/src/3rdparty/angle/src/libANGLE/renderer/d3d/d3d11/Renderer11.cpp
@@ -11,7 +11,7 @@
 #include <EGL/eglext.h>
 #include <sstream>
 #if !defined(ANGLE_MINGW32_COMPAT) && WINAPI_FAMILY != WINAPI_FAMILY_PHONE_APP
-#include <VersionHelpers.h>
+#include <versionhelpers.h>
 #endif
 
 #include "common/tls.h"
diff --git a/src/angle/src/common/common.pri b/src/angle/src/common/common.pri
index c1fad149..67dc4008 100644
--- a/src/angle/src/common/common.pri
+++ b/src/angle/src/common/common.pri
@@ -21,10 +21,14 @@ lib_replace.replace = \$\$\$\$[QT_INSTALL_LIBS]
 lib_replace.CONFIG = path
 QMAKE_PRL_INSTALL_REPLACE += lib_replace
 
-# DirectX is included in the Windows 8 Kit, but everything else requires the DX SDK.
-winrt|msvc {
+!equals(QMAKE_HOST.os, Windows) {
+    # If doing crosscompile, we expect shader header files already compiled by some other way
+    FXC = echo
+} else:winrt|msvc {
+    # DirectX is included in the Windows 8 Kit
     FXC = fxc.exe
 } else {
+    # Everything else requires the DX SDK.
     DX_DIR = $$(DXSDK_DIR)
     isEmpty(DX_DIR) {
         error("Cannot determine DirectX SDK location. Please set DXSDK_DIR environment variable.")
diff --git a/src/angle/src/compiler/translator.pro b/src/angle/src/compiler/translator.pro
index 398b9230..d0c04384 100644
--- a/src/angle/src/compiler/translator.pro
+++ b/src/angle/src/compiler/translator.pro
@@ -179,31 +179,10 @@ SOURCES += \
 
 
 # NOTE: 'flex' and 'bison' can be found in qt5/gnuwin32/bin
-flex.commands = $$addGnuPath(flex) --noline --nounistd --outfile=${QMAKE_FILE_OUT} ${QMAKE_FILE_NAME}
-flex.output = $${BUILDSUBDIR}${QMAKE_FILE_BASE}_lex.cpp
-flex.input = FLEX_SOURCES
-flex.dependency_type = TYPE_C
-flex.variable_out = GENERATED_SOURCES
-QMAKE_EXTRA_COMPILERS += flex
+CONFIG += lex
+QMAKE_MOD_LEX = "_lex"
+LEXSOURCES = $$FLEX_SOURCES
 
-defineReplace(myDirName) { return($$dirname(1)) }
-bison.commands = $$addGnuPath(bison) --no-lines --skeleton=yacc.c --defines=${QMAKE_FILE_OUT} \
-                --output=${QMAKE_FUNC_FILE_OUT_myDirName}$$QMAKE_DIR_SEP${QMAKE_FILE_OUT_BASE}.cpp \
-                ${QMAKE_FILE_NAME}$$escape_expand(\\n\\t) \
-                @echo // EOF>>${QMAKE_FUNC_FILE_OUT_myDirName}$$QMAKE_DIR_SEP${QMAKE_FILE_OUT_BASE}.cpp
-bison.output = $${BUILDSUBDIR}${QMAKE_FILE_BASE}_tab.h
-bison.input = BISON_SOURCES
-bison.dependency_type = TYPE_C
-bison.variable_out = GENERATED_SOURCES
-QMAKE_EXTRA_COMPILERS += bison
-
-# This is a dummy compiler to work around the fact that an extra compiler can only
-# have one output file even if the command generates two.
-MAKEFILE_NOOP_COMMAND = @echo -n
-msvc: MAKEFILE_NOOP_COMMAND = @echo >NUL
-bison_impl.output = $${BUILDSUBDIR}${QMAKE_FILE_BASE}_tab.cpp
-bison_impl.input = BISON_SOURCES
-bison_impl.commands = $$MAKEFILE_NOOP_COMMAND
-bison_impl.depends = $${BUILDSUBDIR}${QMAKE_FILE_BASE}_tab.h
-bison_impl.variable_out = GENERATED_SOURCES
-QMAKE_EXTRA_COMPILERS += bison_impl
+CONFIG += yacc
+QMAKE_MOD_YACC = "_tab"
+YACCSOURCES = $$BISON_SOURCES
diff --git a/src/angle/src/config.pri b/src/angle/src/config.pri
index 4beb0952..48d017ce 100644
--- a/src/angle/src/config.pri
+++ b/src/angle/src/config.pri
@@ -52,7 +52,7 @@ CONFIG(debug, debug|release) {
     DEFINES += NDEBUG
 }
 
-!isEmpty(BUILD_PASS): BUILDSUBDIR = $$lower($$BUILD_PASS)/
+BUILDSUBDIR = $${_PRO_FILE_PWD_}/
 
 # c++11 is needed by MinGW to get support for unordered_map.
 CONFIG += stl exceptions c++11
diff --git a/src/angle/src/libGLESv2/libANGLE b/src/angle/src/libGLESv2/libANGLE
new file mode 120000
index 00000000..bc79f1f9
--- /dev/null
+++ b/src/angle/src/libGLESv2/libANGLE
@@ -0,0 +1 @@
+../QtANGLE/libANGLE
\ No newline at end of file
diff --git a/src/gui/configure.json b/src/gui/configure.json
index 5f606217..531e387e 100644
--- a/src/gui/configure.json
+++ b/src/gui/configure.json
@@ -634,8 +634,7 @@
             "type": "directX",
             "files": [
                 "d3dcompiler.h",
-                "d3d11.lib",
-                "fxc.exe"
+                "libd3d11.a"
             ]
         },
         "egl-x11": {
